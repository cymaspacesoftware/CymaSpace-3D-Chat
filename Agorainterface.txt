using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;

using agora_gaming_rtc;

public class AgoraInterface : MonoBehaviour
{
	private static string appId = "53f96f31d6dd47eb8374992e2fde404f";
	public IRtcEngine mRtcEngine;
	public uint mRemotePeer;


	public void loadEngine()
	{
		// start SDK
		Debug.Log("initilizing engine");

		if (mRtcEngine != null)
		{
			Debug.Log("Engine already exists. Please unload it first");
			return;
		}

		// init RTC engine
		mRtcEngine = IRtcEngine.getEngine(appId);

		// set log level
		mRtcEngine.SetLogFilter(LOG_FILTER.DEBUG);
	}

	public void joinChannel(string channelName)
	{
		Debug.Log("Joining channel: " + channelName);

		if (mRtcEngine == null)
		{
			Debug.Log("Engine needs to be initialized before joining a channel");
			return;
		}

		// set callbacks
		mRtcEngine.OnJoinChannelSuccess = OnJoinChannelSuccess;
		mRtcEngine.OnUserJoined = OnUserJoined;
		mRtcEngine.OnUserOffline = OnUserOffline;

		// enable video
		mRtcEngine.EnableVideo();

		// allow camera output callback
		mRtcEngine.EnableVideoObserver();

		// join the channel
		mRtcEngine.JoinChannel(channelName, null, 0);

	}

	public void leaveChannel()
	{
		Debug.Log("Leaving channel");


		if (mRtcEngine == null)
		{
			Debug.Log("Engine needs to be initialized before leaving a channel");
			return;
		}

		// leave channel
		mRtcEngine.LeaveChannel();

		// remove video observer
		mRtcEngine.DisableVideoObserver();
	}

	public void unloadEngine()
	{
		Debug.Log("Unloading Agora engine");

		if (mRtcEngine != null)
		{
			IRtcEngine.Destory();
			mRtcEngine = null;
		}
	}

	public string getSdkVersion();
	{
		return IRtcEngine.GetSdkVersion();
	}

	// impliment engine callbacks

	private void OnJoinChannelSuccess(string channelName, uint uid, int elapsed)
	{
		Debug.Log("Successfully joined channel: " + channelName + "with id: " + uid);
		GameObject versionText = GameObject.Find("VersionText");
		versionText.GetComponent<Text>().text = "Version " + getSdkVersion();
	}

	private void OnUserJoined(uint uid, int elapsed)
	{
		Debug.Log("New user has joined channel with id" + uid);

		// add remote stream to scene

		// create game object
		GameObject go;

		go = GameObject.CreatePrimitive(PrimitiveType.Plane);

		go.name = uid.ToString()

		// configure video surface

		VideoSurface o = go.AddComponent<VideoSurface>();
		o.SetForUser(uid);
		o.mAdjustTransform += OnTransformDelegate;
		o.SetEnable(true);
		o.transform.Rotate(-90.0f, 0.0f, 0.0f);
		float r = Random.Range(-5.0f, 5.0f);
		o.transform.position = new Vector3(0f, r, 0f);
		o.transform.localScale = new Vector3(0.5f, 0.5f, 1.0f);

		mRemotePeer = uid;
	}

	private void OnUserOffline(uint uid, USER_OFFLINE_REASON reason)
	{
		Debug.Log("User with id: " + uid "has left the channel");

		// remove the game object from the scene
		GameObject go = GameObject.Find(uid.ToString());
		if (!ReferenceEquals(go, null))
		{
			Destory(go);
		}
	}

	private void OnTransformDelegate(uint uid, string objName, ref Transform transform)
	{
		if (uid == 0)
		{
			transform.position = new Vector3(0f, 2f, 0f);
			transform.localScale = new Vector3(2.0f, 2.0f, 1.0f);
			transform.Rotate(0f, 1f, 0f);
		}
		else
		{
			transform.Rotate(0.0f, 1.0f, 0.0f);
		}
	}

	public void OnChatSceneLoaded()
	{
		// access gameObject from scene 1
		GameObject go = GameObject.Fine("Cylinder");
		if (ReferenceEquals(go, null))
		{
			Debug.Log("Unable to find Cylinder game object");
			return;
		}

		// set transform delegate for GO
		VideoSurface 0 = go.GetComponent<VideoSurface>();
		0.mAdjustTransform += OnTransformDelegate;
	}
}
